
import typing
import os
import IPython.display
from PIL import Image as PIL_Image
from PIL import ImageOps as PIL_ImageOps
from vertexai.preview.vision_models import ImageGenerationModel
import vertexai
from dotenv import load_dotenv
from io import BytesIO

os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = r"D:\projects\kani\Hackathon\single-patrol-456519-c3-0a1feab2fd15.json"

def display_image(
    image,
    max_width: int = 600,
    max_height: int = 350,
    ) -> None:
    pil_image = typing.cast(PIL_Image.Image, image._pil_image)
    if pil_image.mode != "RGB":
        # RGB is supported by all Jupyter environments (e.g. RGBA is not yet)
        pil_image = pil_image.convert("RGB")
    image_width, image_height = pil_image.size
    if max_width < image_width or max_height < image_height:
        # Resize to display a smaller notebook image
        pil_image = PIL_ImageOps.contain(pil_image, (max_width, max_height))
    IPython.display.display(pil_image)

# Function to convert the image to bytes
def image_to_bytes(image: PIL_Image.Image) -> bytes:
    byte_io = BytesIO()
    image.save(byte_io, format='PNG')  # Save image as PNG
    byte_io.seek(0)  # Go to the beginning of the byte stream
    return byte_io.read()  # Return image bytes

# Function to save the image to a file
def save_image(image: PIL_Image.Image, file_path: str) -> None:
    image.save(file_path, format='PNG')  # Save image to the specified path
    print(f"Image saved as {file_path}")


vertexai.init(project="single-patrol-456519-c3", location="us-central1")

generation_model = ImageGenerationModel.from_pretrained("imagen-3.0-generate-002")

user_prompt=''
if user_prompt=='':
    prompt_='''
    I would like to generate a cool meme image based on the following input:

    Tweet Trend: Trump and China trade tariffs

    Meaning of the Trend: China has increased tariff rates.

    I want to combine two or more images related to this trend, merging them into a meme with vibrant colors and large images. Add a funny dialogue that fits the theme and makes the meme fun and engaging.
    '''
else:
    prompt_=user_prompt

images = generation_model.generate_images(
    prompt=prompt_,
    number_of_images=4,
    aspect_ratio="1:1",
    negative_prompt="",
    person_generation="",
    safety_filter_level="",
    add_watermark=True,
)

# Get the first generated image
generated_image = images[0]._pil_image  # Assuming the image is returned as a PIL image

# Convert the image to bytes
image_bytes = image_to_bytes(generated_image)
print(image_bytes)
# Save the image
save_image(generated_image, 'generated_meme_image.png')

# Optional: display the image
display_image(images[0])
